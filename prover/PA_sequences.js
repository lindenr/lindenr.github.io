window.exportStatements_sequences = new Map([]);

window.requiredModules_sequences = ["coprime_arithmetic_progressions","mod"];

window.proof_sequences = [
 [
  "AddRelation",
  [
   2,
   "<=",
   "Ex(((@1)+(x))=(@2))"
  ],
  -1,
  ""
 ],
 [
  "AddRelation",
  [
   2,
   "<",
   "Ex(((@1)+(S(x)))=(@2))"
  ],
  -1,
  ""
 ],
 [
  "AddRelation",
  [
   2,
   "!<",
   "((@1)<(@2))=>(F)"
  ],
  -1,
  ""
 ],
 [
  "AddRelation",
  [
   2,
   "!=",
   "((@1)=(@2))=>(F)"
  ],
  -1,
  ""
 ],
 [
  "AddRelation",
  [
   2,
   "|",
   "Ex(((@1)*(x))=(@2))"
  ],
  -1,
  ""
 ],
 [
  "AddConnective",
  [
   2,
   "||",
   "((P)=>(F))=>(Q)"
  ],
  -1,
  ""
 ],
 [
  "AddConnective",
  [
   2,
   "&&",
   "((P)=>((Q)=>(F)))=>(F)"
  ],
  -1,
  ""
 ],
 [
  "AddRelation",
  [
   3,
   "'gcd",
   "(((@3)|(@1))&&((@3)|(@2)))&&(Ah((((h)|(@1))&&((h)|(@2)))=>((h)|(@3))))"
  ],
  -1,
  ""
 ],
 [
  "AddRelation",
  [
   3,
   "'mod",
   "((@3)<(@2))&&(En((@1)=(((n)*(@2))+(@3))))"
  ],
  -1,
  ""
 ],
 [
  "AddRelation",
  [
   3,
   "'cong",
   "Ea(('mod[@1,@3,a])&&('mod[@2,@3,a]))"
  ],
  -1,
  ""
 ],
 [
  "AddRelation",
  [
   3,
   "'conga",
   "Ea(Eb(((@1)+((@3)*(a)))=((@2)+((@3)*(b)))))"
  ],
  -1,
  ""
 ],
 [
  "AddRelation",
  [
   2,
   "'bezoutable",
   "((@1)!=(0))=>(((@2)!=(0))=>(Eu(Eg(('cong[(u)*(@1),g,@2])&&('gcd[@1,@2,g])))))"
  ],
  -1,
  ""
 ],
 [
  "AddRelation",
  [
   2,
   "'br",
   "Ea(Eb(Eg(('gcd[@1,@2,g])&&(((a)*(@1))=(((b)*(@2))+(g))))))"
  ],
  -1,
  ""
 ],
 [
  "AddRelation",
  [
   2,
   "'brr",
   "((@1)!=(0))=>('br[@1,@2])"
  ],
  -1,
  ""
 ],
 [
  "AddRelation",
  [
   1,
   "'prime",
   "((S(0))<(@1))&&(Aa(((a)<(@1))=>(((a)|(@1))=>((a)=(S(0))))))"
  ],
  -1,
  ""
 ],
 [
  "AddRelation",
  [
   2,
   "'nprod",
   "((@1)!=(0))&&(Ax(((x)<=(@2))=>(((x)!=(0))=>((x)|(@1)))))"
  ],
  -1,
  ""
 ],
 [
  "Quote",
  [
   "large coprime APs"
  ],
  15,
  "An(Ak(Ea(Eb(Ai(Aj(((i)<=(n))=>(((j)<=(n))=>(((i)!=(j))=>(((k)<=(a))&&('gcd[(a)+((b)*(i)),(a)+((b)*(j)),S(0)]))))))))))"
 ],
 [
  "Assume",
  [
   "Ai(Ax(Ey(P[i,x,y])))"
  ],
  16,
  "Ai(Ax(Ey(P[i,x,y])))"
 ],
 [
  "Assume",
  [
   "Ai(Ax(Ay1(Ay2((P[i,x,y1])=>((P[i,x,y2])=>((y1)=(y2)))))))"
  ],
  17,
  "Ai(Ax(Ay1(Ay2((P[i,x,y1])=>((P[i,x,y2])=>((y1)=(y2)))))))"
 ],
 [
  "SetComment",
  [
   16,
   "exists y=f(i,x)"
  ],
  16,
  "Ai(Ax(Ey(P[i,x,y])))"
 ],
 [
  "SetComment",
  [
   17,
   "unique y=f(i,x)"
  ],
  17,
  "Ai(Ax(Ay1(Ay2((P[i,x,y1])=>((P[i,x,y2])=>((y1)=(y2)))))))"
 ],
 [
  "SV",
  [
   16,
   "0"
  ],
  18,
  "Ax(Ey(P[0,x,y]))"
 ],
 [
  "SV",
  [
   18,
   "0"
  ],
  19,
  "Ey(P[0,0,y])"
 ],
 [
  "SV",
  [
   19,
   "#r"
  ],
  20,
  "P[0,0,#r]"
 ],
 [
  "Quote",
  [
   "mod unique"
  ],
  21,
  "Ax(Am(Aa(Aa1(('mod[x,m,a])=>(('mod[x,m,a1])=>((a)=(a1)))))))"
 ],
 [
  "Quote",
  [
   "mod exists"
  ],
  22,
  "Ax(Am(((0)<(m))=>(Ea('mod[x,m,a]))))"
 ],
 [
  "Quote",
  [
   "mod plus a multiple"
  ],
  23,
  "Ax(Am(Aa(Ab(('mod[x,m,a])=>('mod[(x)+((b)*(m)),m,a])))))"
 ],
 [
  "Quote",
  [
   "mod subtract a multiple"
  ],
  24,
  "Ax(Am(Aa(Ab(('mod[(x)+((b)*(m)),m,a])=>('mod[x,m,a])))))"
 ],
 [
  "Quote",
  [
   "mod idempotent"
  ],
  25,
  "Ax(Am(Aa(('mod[x,m,a])=>('mod[a,m,a]))))"
 ],
 [
  "Quote",
  [
   "0 mod m"
  ],
  26,
  "Am(((0)<(m))=>('mod[0,m,0]))"
 ],
 [
  "Quote",
  [
   "multiple of m mod m"
  ],
  27,
  "Am(Ab(((0)<(m))=>('mod[(m)*(b),m,0])))"
 ],
 [
  "Quote",
  [
   "technical mod lemma"
  ],
  28,
  "Ax(Am(Aa((Eu('mod[(u)*(x),m,a]))=>(Eu('mod[(u)*(x),(x)+(m),a])))))"
 ]
];